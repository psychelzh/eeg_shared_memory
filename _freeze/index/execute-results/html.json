{
  "hash": "7ecf4caf7dda3c1ce8ea69a041536987",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Representation Analysis\nauthor:\n  - name: Liang Zhang\n  - name: Jintao Sheng\nformat:\n  html:\n    code-fold: true\n    toc: true\nexecute:\n  warning: false\neditor_options:\n  chunk_output_type: console\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(patchwork)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncolors_components <- c(\"#16607a\", \"#0b9d86\", \"#cc734d\")\nsize_label <- 5\n\nindex_time <- function(time_id, onset = 51, sampling_rate = 256) {\n  (time_id - onset) / sampling_rate * 1000\n}\n\nfit_curve <- function(x, y) {\n  nls(\n    y ~ eta1 * (1 - exp(theta - eta2 * x)),\n    start = list(eta1 = 1, eta2 = 0.01, theta = 0)\n  )\n}\n\nprepare_corr_plotmath <- function(stats, \n                                  col_r = \"estimate\",\n                                  col_p = \"p.value\",\n                                  name_r = \"italic(r)\",\n                                  name_p = \"italic(p)[Holm]\") {\n  stats |>\n    rstatix::adjust_pvalue(col_p, \"p_adj\") |> \n    rstatix::add_significance(\n      \"p_adj\", \"p_adj_sig\",\n      cutpoints = c(0, 0.001, 0.01, 0.05, 1),\n      symbols = c(\"***\", \"**\", \"*\", \"\")\n    ) |> \n    mutate(\n      label = format_r_plotmath(\n        .data[[col_r]], p_adj, \n        p.sig = p_adj_sig,\n        name_r = name_r,\n        name_p = name_p\n      )\n    )\n}\n\nformat_r_plotmath <- function(r, p, \n                              p.sig = \"\", \n                              name_r = \"italic(r)\", \n                              name_p = \"italic(p)[Holm]\") {\n  paste0(\n    str_glue(\"{name_r}*' = '*{round(r, 2)}\"),\n    if (is.null(name_p)) {\n      str_glue(\"^'{p.sig}'\")\n    } else {\n      paste0(\n        \"*', '*\",\n        if_else(\n          p < 0.001,\n          str_glue(\"{name_p} < 0.001^'{p.sig}'\"),\n          str_glue(\"{name_p}*' = '*{round(p, 3)}^'{p.sig}'\")\n        )\n      )\n    }\n  )\n}\n\nvisualize_scatter <- function(data, mem_perf, lab_stat, col_stat,\n                              show_legend = FALSE) {\n  data_joind <- data |>\n    left_join(mem_perf, by = \"subj_id\") |> \n    mutate(cca_id = factor(cca_id))\n  stats <- data_joind |> \n    reframe(\n      cor.test(.data[[col_stat]], .data$dprime) |>\n        broom::tidy(),\n      .by = cca_id\n    ) |> \n    prepare_corr_plotmath()\n  data_joind |> \n    ggplot(aes(.data[[col_stat]], dprime)) +\n    geom_point(aes(color = cca_id), show.legend = show_legend) +\n    geom_smooth(\n      aes(color = cca_id),\n      method = \"lm\",\n      formula = y ~ x,\n      show.legend = show_legend\n    ) +\n    geom_text(\n      aes(x = min(data_joind[[col_stat]]), y = Inf, label = label),\n      stats, hjust = 0, vjust = 1, parse = TRUE\n    ) +\n    facet_grid(cols = vars(cca_id), scales = \"free\") +\n    scale_x_continuous(name = lab_stat) +\n    scale_y_continuous(name = \"d'\") +\n    scale_color_components() +\n    theme(axis.line = element_line(linewidth = 1), strip.text = element_blank())\n}\n\nvisualize_mantel <- function(patterns_x, patterns_y, stats, name_x, name_y,\n                             show_legend = FALSE) {\n  patterns_flat <- patterns_x |>\n    mutate(\n      pattern = map(\n        pick(last_col())[[1]],\n        \\(pat) tibble(\n          \"{name_x}\" := unclass(pat),\n          \"{name_y}\" := unclass(patterns_y)\n        )\n      ),\n      .keep = \"unused\"\n    ) |>\n    unnest(pattern)\n  patterns_flat |>\n    ggplot(aes(.data[[name_x]], .data[[name_y]])) +\n    geom_hex(\n      aes(fill = factor(cca_id), alpha = after_stat(count)),\n      show.legend = FALSE\n    ) +\n    geom_smooth(\n      aes(color = factor(cca_id)),\n      method = \"lm\",\n      formula = y ~ x,\n      show.legend = show_legend\n    ) +\n    geom_text(\n      aes(x = min(patterns_flat[[name_x]]), y = Inf, label = label),\n      prepare_corr_plotmath(\n        stats, \"statistic\", \n        name_p = \"italic(p)[Holm]^{Mantel}\"\n      ),\n      hjust = 0, vjust = 1, parse = TRUE\n    ) +\n    facet_grid(cols = vars(cca_id), scales = \"free\") +\n    scale_x_continuous(name = name_x) +\n    scale_y_continuous(name = name_y) +\n    scale_color_components(aesthetics = c(\"color\", \"fill\")) +\n    theme(\n      strip.text = element_blank(),\n      axis.line = element_line(linewidth = 1)\n    )\n}\n\nvisualize_mantel_dist <- function(data, stats, label, show_legend = FALSE) {\n  data |> \n    mutate(\n      cca_id = factor(cca_id),\n      null = map(mantel, \"perm\"),\n      .keep = \"unused\"\n    ) |> \n    unchop(null) |> \n    ggplot(aes(null)) +\n    geom_histogram(aes(fill = cca_id), show.legend = show_legend) +\n    geomtextpath::geom_textvline(\n      aes(xintercept = statistic, label = label),\n      stats |> \n        mutate(cca_id = factor(cca_id)) |> \n        prepare_corr_plotmath(\n          \"statistic\", \n          name_r = \"italic(r)[Obs]\",\n          name_p = NULL\n        ),\n      parse = TRUE,\n      vjust = -0.1\n    ) +\n    facet_grid(cols = vars(cca_id)) +\n    scale_x_continuous(name = label) +\n    scale_y_continuous(name = \"Count\", expand = expansion(mult = c(0, 0.05))) +\n    scale_color_components(aesthetics = \"fill\") +\n    theme(\n      axis.line = element_line(linewidth = 1),\n      strip.text = element_blank(),\n      strip.background = element_blank()\n    )\n}\n\nvisualize_dynamic <- function(stats, \n                              clusters_stats = NULL, \n                              col_stat = \"estimate\",\n                              lab_stat = \"Estimate\",\n                              col_cis = c(\"conf.low\", \"conf.high\"),\n                              limits = NULL,\n                              show_legend = FALSE) {\n  if (!is.null(clusters_stats)) {\n    clusters_stats <- clusters_stats |>\n      mutate(cca_id = factor(cca_id)) |>\n      rstatix::adjust_pvalue(\"p_perm\") |>\n      rstatix::add_significance(\n        \"p_perm.adj\",\n        cutpoints = c(0, 0.001, 0.01, 0.05, 1),\n        symbols = c(\"***\", \"**\", \"*\", \"\")\n      ) |>\n      filter(p_perm < 0.05)\n  }\n  show_cis <- !is.null(col_cis) && all(has_name(stats, col_cis))\n  limits_rect <- if (show_cis) {\n    range(c(stats[[col_cis[1]]], stats[[col_cis[2]]]))\n  } else {\n    range(stats[[col_stat]])\n  }\n  stats |>\n    mutate(\n      cca_id = factor(cca_id),\n      time = index_time(time_id)\n    ) |>\n    ggplot(aes(time, .data[[col_stat]])) +\n    geom_line(\n      aes(color = cca_id),\n      linewidth = 1,\n      show.legend = show_legend\n    ) +\n    # TODO: Convert these as functions\n    {\n      if (show_cis) {\n        geom_ribbon(\n          aes(\n            fill = cca_id,\n            ymin = .data[[col_cis[1]]],\n            ymax = .data[[col_cis[2]]]\n          ),\n          alpha = 0.2,\n          show.legend = show_legend\n        )\n      }\n    } + \n    {\n      if (!is.null(clusters_stats)) {\n        list(\n          geom_rect(\n            data = clusters_stats,\n            mapping = aes(\n              xmin = index_time(start),\n              xmax = index_time(end),\n              ymin = limits_rect[1],\n              ymax = limits_rect[2]\n            ),\n            inherit.aes = FALSE,\n            alpha = 0.1\n          ),\n          geom_text(\n            data = clusters_stats,\n            mapping = aes(\n              x = index_time((start + end) / 2),\n              y = limits_rect[2],\n              label = p_perm.adj.signif\n            ),\n            size = size_label,\n            inherit.aes = FALSE\n          )\n        )\n      }\n    } +\n    facet_grid(cols = vars(cca_id)) +\n    geom_hline(yintercept = 0, linetype = \"dotted\", color = \"grey\") +\n    geom_vline(xintercept = 0, linetype = \"dotted\", color = \"grey\") +\n    scale_x_continuous(name = \"Encoding Time (ms)\") +\n    scale_y_continuous(name = lab_stat, limits = limits) +\n    scale_color_components(aesthetics = c(\"color\", \"fill\")) +\n    theme(\n      strip.text = element_blank(),\n      strip.background = element_blank(),\n      axis.line = element_line(linewidth = 1)\n    )\n}\n\nscale_color_components <- function(...) {\n  scale_color_manual(\n    name = \"CCA Comp.\",\n    values = colors_components,\n    labels = \\(x) paste0(\"C\", x),\n    ...\n  )\n}\ntheme_set(ggpubr::theme_pubr(base_family = \"Gill Sans MT\", base_size = 12))\n```\n:::\n\n\n\n\n# Group averaged representation\n\nThis is supplementary figure showing the stability.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntargets::tar_load(patterns_group_stability)\nsize_subjs <- seq(20, 200, by = 20)\npredictions <- patterns_group_stability |>\n  reframe(\n    fit_curve(size, r) |>\n      predict(newdata = data.frame(x = size_subjs)) |>\n      as_tibble_col(\"r\") |>\n      add_column(size = size_subjs, .before = 1L),\n    .by = cca_id\n  )\np_stability <- patterns_group_stability |>\n  ggplot(aes(size, r, color = factor(cca_id))) +\n  ggdist::stat_dotsinterval() +\n  geom_point(aes(size, r), predictions, size = 1) +\n  geom_line(aes(size, r), predictions, linetype = \"longdash\") +\n  scale_x_continuous(name = \"# Participants\", breaks = scales::breaks_width(40)) +\n  scale_y_continuous(name = \"Group Representation Stability\") +\n  scale_color_components() +\n  facet_grid(cols = vars(cca_id), scales = \"free\") +\n  theme(axis.line = element_line(linewidth = 1), strip.text = element_blank())\n\np_trend_gss <- targets::tar_read(data_gss_whole_resampled) |>\n  ggplot(aes(size, gss, color = factor(cca_id))) +\n  ggdist::stat_dotsinterval() +\n  scale_x_continuous(name = \"# Participants\", breaks = scales::breaks_width(40)) +\n  scale_y_continuous(name = expression(italic(r)[neu - sem])) +\n  scale_color_components() +\n  facet_grid(cols = vars(cca_id), scales = \"free\") +\n  theme(axis.line = element_line(linewidth = 1), strip.text = element_blank())\n```\n:::\n\n\n\n\nThis is Figure 2 now.\n\n\n\n\n::: {.cell .column-page}\n\n```{.r .cell-code}\n# IGS predicts memory ----\np_igs_mem <- visualize_scatter(\n  targets::tar_read(data_igs_whole),\n  targets::tar_read(mem_perf),\n  lab_stat = \"IGS\",\n  col_stat = \"igs\",\n  show_legend = TRUE\n)\n\np_igs_mem_dynamic <- visualize_dynamic(\n  targets::tar_read(stats_igs_mem_dynamic),\n  targets::tar_read(clusters_stats_igs_mem_dynamic),\n  lab_stat = expression(italic(r)[IGS - \"d'\"])\n)\n\n# semantics related to group pattern (not shape) ----\np_gss_whole <- visualize_mantel(\n  targets::tar_read(patterns_group_whole),\n  targets::tar_read(pattern_semantics),\n  targets::tar_read(stats_gss_whole),\n  \"Group Averaged Neural Representation\",\n  \"Semantic Resprentation\"\n)\n\np_gss_dynamic <- visualize_dynamic(\n  targets::tar_read(stats_gss_dynamic),\n  targets::tar_read(clusters_stats_gss_dynamic),\n  col_stat = \"statistic\",\n  lab_stat = \"GSS\"\n)\n\n(p_igs_mem | p_igs_mem_dynamic) /\n  (p_gss_whole | p_gss_dynamic) +\n  plot_layout(guides = \"collect\") &\n  # plot_annotation(tag_levels = \"A\") &\n  theme(legend.position = \"bottom\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=1248}\n:::\n\n```{.r .cell-code}\nggsave(\"figures/igs_memory_gss_semantics.png\", width = 13, height = 5, dpi = 600)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\np_group_shapes <- visualize_mantel(\n  targets::tar_read(patterns_group_whole),\n  targets::tar_read(pattern_shapes),\n  targets::tar_read(stats_gcs_whole),\n  \"Group Averaged Neural Representation\",\n  \"Shape Similarity\"\n)\n```\n:::\n\n\n\n\n# Semantic representation\n\nSemantic information is important but non-semantic information is also important.\n\nThis will be Figure 3.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstats_iss_whole <- targets::tar_read(stats_iss_whole) |>\n  rstatix::adjust_pvalue() |>\n  rstatix::add_significance(\n    cutpoints = c(0, 0.001, 0.01, 0.05, 1),\n    symbols = c(\"***\", \"**\", \"*\", \"\")\n  ) |>\n  add_column(y = 0.13, .after = 1L)\niss_comparison <- targets::tar_read(iss_comparison) |>\n  filter(adj.p.value < 0.05) |>\n  mutate(\n    across(c(start, end), \\(x) factor(x, levels = 1:3)),\n    y_position = 0.14 * (1 + 0.12 * seq_len(n()))\n  ) |>\n  rstatix::add_significance(\n    \"adj.p.value\",\n    cutpoints = c(0, 0.001, 0.01, 0.05, 1),\n    symbols = c(\"***\", \"**\", \"*\", \"\")\n  )\n\np_iss_dist <- targets::tar_read(data_iss_whole) |>\n  mutate(cca_id = factor(cca_id)) |>\n  ggplot(aes(cca_id, iss)) +\n  ggdist::stat_dotsinterval(\n    aes(slab_color = cca_id, slab_fill = cca_id),\n    slab_alpha = 0.4,\n    side = \"both\"\n  ) +\n  geom_text(\n    aes(cca_id, y, label = p.value.adj.signif),\n    stats_iss_whole,\n    size = size_label,\n    vjust = 0,\n    inherit.aes = FALSE\n  ) +\n  ggsignif::geom_signif(\n    aes(\n      xmin = start, xmax = end,\n      annotations = adj.p.value.signif,\n      y_position = y_position\n    ),\n    iss_comparison,\n    size = 0.8,\n    textsize = size_label,\n    vjust = 0.5,\n    inherit.aes = FALSE,\n    manual = TRUE\n  ) +\n  scale_x_discrete(name = NULL, labels = \\(x) paste0(\"C\", x)) +\n  scale_y_continuous(name = \"ISS\") +\n  scale_color_components(\n    aesthetics = c(\"slab_color\", \"slab_fill\"),\n    guide = \"none\"\n  ) +\n  theme(axis.line = element_line(linewidth = 1))\n\np_iss_dynamic <- visualize_dynamic(\n  targets::tar_read(stats_iss_dynamic),\n  targets::tar_read(clusters_stats_iss_dynamic),\n  col_stat = \"estimate\",\n  lab_stat = \"ISS\",\n  show_legend = TRUE\n)\n\np_iss_mem_scatter <- visualize_scatter(\n  targets::tar_read(data_iss_whole),\n  targets::tar_read(mem_perf),\n  lab_stat = \"ISS\",\n  col_stat = \"iss\"\n)\n\np_iss_mem_dynamic <- visualize_dynamic(\n  targets::tar_read(stats_iss_mem_dynamic),\n  targets::tar_read(clusters_stats_iss_mem_dynamic),\n  col_stat = \"estimate\",\n  lab_stat = expression(italic(r)[ISS - \"d'\"])\n)\n\n# (p_iss_dist | p_iss_dynamic) / (p_iss_mem_scatter | p_iss_mem_dynamic) +\n#   plot_layout(guides = \"collect\") &\n#   theme(legend.position = \"bottom\")\n# ggsave(\"figures/iss_memory.png\", width = 12, height = 5, dpi = 600)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntargets::tar_load(igs_comp_partial)\nmult <- 1\nstats <- igs_comp_partial$stats |>\n  mutate(\n    ymax = estimate + mult * std.error,\n    ymin = estimate - mult * std.error\n  )\nhtests <- igs_comp_partial$htest |>\n  separate_wider_delim(\n    contrast,\n    \" - \",\n    names = c(\"start\", \"end\")\n  ) |>\n  rstatix::add_significance(\n    \"p.value\",\n    cutpoints = c(0, 0.001, 0.01, 0.05, 1),\n    symbols = c(\"***\", \"**\", \"*\", \"\")\n  ) |>\n  mutate(y_position = max(stats$ymax)) |>\n  filter(p.value < 0.05)\np_compare_igs_partial <- stats |>\n  ggplot(aes(type, estimate, ymax = ymax, ymin = ymin, color = cca_id)) +\n  geom_point(size = size_label) +\n  geom_errorbar(width = 0.1, linewidth = 1) +\n  geom_line(aes(group = cca_id), linewidth = 1) +\n  ggsignif::geom_signif(\n    aes(\n      xmin = start, xmax = end,\n      annotations = p.value.signif,\n      y_position = y_position\n    ),\n    htests,\n    size = 0.8,\n    textsize = size_label,\n    vjust = 0.5,\n    inherit.aes = FALSE,\n    manual = TRUE\n  ) +\n  facet_grid(cols = vars(cca_id), scales = \"free\") +\n  scale_x_discrete(name = NULL, labels = c(\"IGS\", \"IGS|S\")) +\n  scale_y_continuous(name = expression(italic(r))) +\n  scale_color_components(guide = \"none\") +\n  theme(\n    strip.text = element_blank(),\n    strip.background = element_blank(),\n    axis.line = element_line(linewidth = 1)\n  )\n\np_igs_partial_scatter <- visualize_scatter(\n  targets::tar_read(data_igs_partial_whole),\n  targets::tar_read(mem_perf),\n  lab_stat = \"IGS|S\",\n  col_stat = \"igs\"\n)\n\ntargets::tar_load(c(lm_mem_igs_partial, lm_mem_iss_igs_partial))\npreds <- bind_rows(\n  `IGS|S` = lm_mem_igs_partial$pred,\n  `ISS + IGS|S` = lm_mem_iss_igs_partial$pred,\n  .id = \"model\"\n) |>\n  mutate(model = factor(model, c(\"ISS + IGS|S\", \"IGS|S\")))\nmodel_eval <- tibble(\n  x = min(preds$obs),\n  y = max(preds$pred) * (1 + c(0.1, 0.02)),\n  model = factor(c(\"ISS + IGS|S\", \"IGS|S\")),\n  r_squared = c(\n    caret::getTrainPerf(lm_mem_iss_igs_partial)$TrainRsquared,\n    caret::getTrainPerf(lm_mem_igs_partial)$TrainRsquared\n  ) |>\n    signif(2)\n)\np_compare_predictions <- preds |>\n  ggplot(aes(obs, pred, color = model)) +\n  geom_point(shape = 16) +\n  geom_smooth(method = \"lm\") +\n  ggtext::geom_richtext(\n    aes(\n      x, y,\n      color = model,\n      label = paste0(\n        \"*R*<sup>2</sup><sub>\",\n        model, \"</sub> = \",\n        r_squared\n      )\n    ),\n    model_eval,\n    size = 3,\n    fill = NA, label.color = NA, # remove background and outline\n    label.padding = grid::unit(rep(0, 4), \"pt\"), # remove padding\n    hjust = 0, vjust = 0.5, # bottom-left corner\n    inherit.aes = FALSE,\n    show.legend = FALSE\n  ) +\n  # facet_grid(cols = vars(model)) +\n  scale_x_continuous(name = \"Observed\") +\n  scale_y_continuous(name = \"Predicted\") +\n  scale_color_grey(start = 0.1, end = 0.6, name = \"Model\", guide = \"none\") +\n  theme(strip.background = element_blank(), axis.line = element_line(linewidth = 1))\n```\n:::\n\n::: {.cell .column-page}\n\n```{.r .cell-code}\nlayout <- \"\nAAABBB\nCCCDDD\nEEFFFG\n\"\n\np_iss_dist + p_iss_dynamic + p_iss_mem_scatter + p_iss_mem_dynamic +\n  p_compare_igs_partial + p_igs_partial_scatter + p_compare_predictions +\n  plot_layout(design = layout, guides = \"collect\") +\n  plot_annotation(tag_levels = \"A\") &\n  theme(legend.position = \"bottom\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=1248}\n:::\n\n```{.r .cell-code}\nggsave(\"figures/semantics_memory.png\", width = 13, height = 8, dpi = 600)\n```\n:::\n\n\n\n\n# Predicting Shared Memory Content (SMC)\n\n## Inter-Subject Pattern Similarity (ISPS)\n\n\n\n\n::: {.cell .column-page}\n\n```{.r .cell-code}\np_isps_dist <- targets::tar_read(data_isps_whole) |>\n  mutate(cca_id = factor(cca_id)) |>\n  unnest(isps) |>\n  ggplot(aes(cca_id, isps)) +\n  ggdist::stat_slabinterval(\n    aes(slab_color = cca_id, slab_fill = cca_id),\n    slab_alpha = 0.4,\n    side = \"both\"\n  ) +\n  geom_hline(\n    aes(yintercept = isps_baseline),\n    targets::tar_read(summary_isps_whole_permuted) |> \n      summarise(isps_baseline = mean(isps_mean), .by = cca_id) |> \n      mutate(cca_id = factor(cca_id)),\n    linetype = \"dotted\"\n  ) +\n  scale_x_discrete(name = NULL, labels = \\(x) paste0(\"C\", x)) +\n  scale_y_continuous(name = \"ISPS\") +\n  scale_color_components(\n    aesthetics = c(\"slab_color\", \"slab_fill\"),\n    guide = \"none\"\n  ) +\n  theme(axis.line = element_line(linewidth = 1))\n\np_isps_dynamic <- visualize_dynamic(\n  targets::tar_read(stats_isps_dynamic) |> \n    mutate(\n      ymax = isps_mean + isps_se,\n      ymin = isps_mean - isps_se\n    ),\n  col_stat = \"isps_mean\",\n  lab_stat = \"ISPS\",\n  col_cis = c(\"ymin\", \"ymax\")\n)\n\n# the cluster based permutation test is not useful (maybe we need TFCE)\n# p_isps_clusters <- visualize_dynamic(\n#   targets::tar_read(stats_isps_dynamic) |> \n#     mutate(\n#       ymax = isps_mean + isps_se,\n#       ymin = isps_mean - isps_se\n#     ),\n#   targets::tar_read(clusters_stats_isps_dynamic),\n#   col_stat = \"isps_mean\",\n#   lab_stat = \"ISPS\",\n#   col_cis = c(\"ymin\", \"ymax\")\n# )\n\np_isps_smc <- visualize_mantel_dist(\n  targets::tar_read(data_isps_smc_whole),\n  targets::tar_read(stats_isps_smc_whole),\n  expression(italic(r)[ISPS - SMC]),\n  show_legend = TRUE\n)\n\np_isps_smc_dynamic <- visualize_dynamic(\n  targets::tar_read(stats_isps_smc_dynamic),\n  targets::tar_read(clusters_stats_isps_smc_dynamic),\n  col_stat = \"statistic\",\n  lab_stat = expression(italic(r)[ISPS - SMC])\n)\n\np_isps_dist + p_isps_dynamic + p_isps_smc + p_isps_smc_dynamic +\n  plot_layout(guides = \"collect\") &\n  theme(legend.position = \"bottom\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/isps-and-smc-1.png){width=1248}\n:::\n\n```{.r .cell-code}\nggsave(\"figures/isps_smc.png\", width = 13, height = 5, dpi = 600)\n```\n:::\n\n\n\n\n## Neural Synchronization\n\n\n\n\n::: {.cell .column-page}\n\n```{.r .cell-code}\ntargets::tar_load(sync_inter_intra)\nsummary_sync <- sync_inter_intra |>\n  summarise(\n    broom::tidy(t.test(sync)),\n    .by = c(cca_id, type)\n  ) |>\n  rstatix::adjust_pvalue() |>\n  rstatix::add_significance(\n    cutpoints = c(0, 0.001, 0.01, 0.05, 1),\n    symbols = c(\"***\", \"**\", \"*\", \"\")\n  )\ncompare_sync_p <- sync_inter_intra |>\n  pivot_wider(\n    id_cols = c(subj_id, cca_id),\n    names_from = type,\n    values_from = sync\n  ) |>\n  summarise(\n    broom::tidy(t.test(intra, inter_ahead, paired = TRUE)),\n    .by = cca_id\n  ) |>\n  rstatix::adjust_pvalue() |>\n  rstatix::add_significance(\n    cutpoints = c(0, 0.001, 0.01, 0.05, 1),\n    symbols = c(\"***\", \"**\", \"*\", \"\")\n  ) |>\n  mutate(\n    start = \"intra\", end = \"inter_ahead\",\n    y_position = max(summary_sync$conf.high) * 1.1\n  )\np_sync_compare <- summary_sync |>\n  ggplot(aes(type, estimate)) +\n  geom_col(\n    aes(color = cca_id, fill = cca_id, alpha = type),\n    width = 0.75\n  ) +\n  geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = 0.1) +\n  geom_text(\n    aes(y = conf.high, label = p.value.adj.signif),\n    vjust = 0,\n    size = size_label\n  ) +\n  ggsignif::geom_signif(\n    data = compare_sync_p,\n    aes(\n      xmin = start,\n      xmax = end,\n      annotations = p.value.adj.signif,\n      y_position = y_position\n    ),\n    textsize = size_label,\n    inherit.aes = FALSE,\n    manual = TRUE\n  ) +\n  facet_grid(cols = vars(cca_id)) +\n  scale_x_discrete(name = NULL, labels = c(\"Intra\", \"Inter\")) +\n  scale_y_continuous(\n    name = \"Neural Sync\",\n    expand = expansion(c(0, 0.1))\n  ) +\n  scale_color_components(aesthetics = c(\"fill\", \"color\")) +\n  scale_alpha_manual(\n    name = NULL,\n    values = c(1, 0),\n    guide = \"none\"\n  ) +\n  theme(\n    strip.text = element_blank(),\n    axis.line = element_line(linewidth = 1)\n  )\n\nsync_mem <- sync_inter_intra |>\n  left_join(targets::tar_read(mem_perf), by = \"subj_id\") |> \n  mutate(cca_id = factor(cca_id))\nstats_sync_mem <- sync_mem |>\n  summarise(\n    broom::tidy(cor.test(sync, dprime)),\n    .by = c(cca_id, type)\n  ) |>\n  rstatix::adjust_pvalue() |>\n  rstatix::add_significance(\n    cutpoints = c(0, 0.001, 0.01, 0.05, 1),\n    symbols = c(\"***\", \"**\", \"*\", \"\")\n  ) |> \n  prepare_corr_plotmath() |> \n  mutate(\n    x = min(sync_mem$sync),\n    y = max(sync_mem$dprime) * 1.2 * (1 - 0.1 * as.integer(type))\n  )\n\np_pred_mem <- sync_mem |>\n  ggplot(aes(x = sync, y = dprime, alpha = type)) +\n  geom_point(aes(color = cca_id, shape = type)) +\n  geom_line(\n    aes(color = cca_id),\n    stat = \"smooth\",\n    method = \"lm\",\n    formula = y ~ x\n    # linewidth = 2,\n    # fullrange = TRUE\n  ) +\n  geom_text(\n    aes(x, y, label = label),\n    stats_sync_mem,\n    hjust = 0, vjust = 1, parse = TRUE,\n  ) +\n  facet_grid(cols = vars(cca_id)) +\n  scale_x_continuous(name = \"Neural Sync\") +\n  scale_y_continuous(name = \"Memory (d')\") +\n  scale_alpha_manual(\n    name = NULL,\n    values = c(1, 0.5),\n    guide = \"none\"\n  ) +\n  scale_shape_manual(\n    name = NULL,\n    values = c(16, 1),\n    labels = c(\"Intra\", \"Inter\")\n    # guide = \"none\"\n  ) +\n  scale_color_manual(values = colors_components, guide = \"none\") +\n  theme(\n    strip.text = element_blank(),\n    axis.line = element_line(linewidth = 1)\n  )\n\np_sync_smc <- visualize_mantel_dist(\n  targets::tar_read(sync_smc_whole),\n  targets::tar_read(stats_sync_smc_whole),\n  expression(italic(r)[Sync - SMC])\n)\n\np_sync_smc_dynamic <- visualize_dynamic(\n  targets::tar_read(stats_sync_smc_dynamic),\n  targets::tar_read(clusters_stats_sync_smc_dynamic),\n  col_stat = \"statistic\",\n  lab_stat = expression(italic(r)[Sync - SMC])\n)\n\np_sync_compare + p_pred_mem + p_sync_smc + p_sync_smc_dynamic +\n  plot_layout(guides = \"collect\") +\n  plot_annotation(tag_levels = \"A\") &\n  theme(legend.position = \"bottom\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/sync-and-mem-1.png){width=1248}\n:::\n\n```{.r .cell-code}\nggsave(\"figures/sync_results.png\", width = 13, height = 6.5, dpi = 300)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1)\n\n# representational patterns ----\nvis_pat <- function(pat) {\n  corrplot::corrplot(\n    pat,\n    method = \"color\",\n    outline = TRUE,\n    col = corrplot::COL1(\"Greys\"),\n    tl.pos = \"n\",\n    cl.pos = \"n\"\n  )\n}\nx_indiv <- pracma::squareform(rnorm(15, 0.5, 0.25))\nx_group <- pracma::squareform(rnorm(15, 0.5, 0.25))\nx_sem <- pracma::squareform(rnorm(15, 0.5, 0.25))\ndiag(x_indiv) <- diag(x_group) <- diag(x_sem) <- 1\npng(\"figures/diagrams/indiv_matrix.png\", width = 400, height = 400)\nvis_pat(x_indiv)\ndev.off()\npng(\"figures/diagrams/group_matrix.png\", width = 400, height = 400)\nvis_pat(x_group)\ndev.off()\npng(\"figures/diagrams/sem_matrix.png\", width = 400, height = 400)\nvis_pat(x_sem)\ndev.off()\n\n# word2vec embeddings ----\nembedding <- as_tibble(split(rnorm(14, 0.5, 0.2), rep(1:2, each = 7))) |>\n  mutate(id = seq_len(n()), label = \"\")\nembedding[6, 1:2] <- NA\nembedding$label[6] <- \"…\"\n\nembedding |>\n  ggplot(aes(id, 1, fill = `1`)) +\n  geom_tile() +\n  geom_text(aes(label = label), size = 12, vjust = 0.2) +\n  scale_fill_gradient(low = \"grey80\", high = \"grey20\", na.value = \"white\", guide = \"none\") +\n  coord_fixed() +\n  theme_void()\nggplot2::ggsave(\"figures/diagrams/embedding_1.png\", width = 8, height = 2, dpi = 300)\n\nembedding |>\n  ggplot(aes(id, 1, fill = `2`)) +\n  geom_tile() +\n  geom_text(aes(label = label), size = 12, vjust = 0.2) +\n  scale_fill_gradient(low = \"grey80\", high = \"grey20\", na.value = \"white\", guide = \"none\") +\n  coord_fixed() +\n  theme_void()\nggplot2::ggsave(\"figures/diagrams/embedding_2.png\", width = 8, height = 2, dpi = 300)\n\n# neural activity ----\ntargets::tar_load(file_cca_y)\ndata_trials <- arrow::open_dataset(file_cca_y) |>\n  filter(subj_id == 1, cca_id == 1, trial_id %in% 1:6) |>\n  collect()\ndata_trials |>\n  nest(.by = trial_id) |>\n  mutate(\n    walk2(\n      data, trial_id,\n      ~ {\n        ggplot(.x, aes(time_id, y)) +\n          geom_line(linewidth = 3, color = \"grey\") +\n          scale_x_continuous(name = \"Time (ms)\") +\n          scale_y_continuous(name = \"Neural Activity\") +\n          theme_void()\n        ggsave(\n          paste0(\"figures/diagrams/trial_\", .y, \".png\"),\n          width = 8, height = 2, dpi = 300\n        )\n      }\n    )\n  )\n\ndata_group <- arrow::open_dataset(file_cca_y) |>\n  filter(trial_id %in% 1:2, cca_id == 1) |>\n  collect() |>\n  summarise(y = mean(y, na.rm = TRUE), .by = c(trial_id, time_id))\ndata_group |>\n  nest(.by = trial_id) |>\n  mutate(\n    walk2(\n      data, trial_id,\n      ~ {\n        ggplot(.x, aes(time_id, y)) +\n          geom_line(linewidth = 3, color = \"black\") +\n          scale_x_continuous(name = \"Time (ms)\") +\n          scale_y_continuous(name = \"Neural Activity\") +\n          theme_void()\n        ggsave(\n          paste0(\"figures/diagrams/group_avg_trial_\", .y, \".png\"),\n          width = 8, height = 2, dpi = 300\n        )\n      }\n    )\n  )\n```\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}