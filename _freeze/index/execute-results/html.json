{
  "hash": "4c7b52c2593ff725200ba9bae5a50619",
  "result": {
    "markdown": "---\ntitle: Representation Analysis\nauthor:\n  - name: Liang Zhang\n  - name: Jintao Sheng\nformat:\n  html:\n    code-fold: true\n    toc: true\nexecute:\n  warning: false\nbibliography: references.bib\n---\n\n::: {.cell}\n\n```{.r .cell-code}\ndevtools::load_all()\n\n# colors used for correlation values mapping\ncolors_cor <- c(pos = \"tomato\", neg = \"deepskyblue\")\n\n# visualize significant clusters\nvis_cluster <- function(stats, clusters_p, ...,\n                        col_stats = estimate, \n                        col_p = p_perm,\n                        facet = NULL) {\n  ggplot() +\n    geom_raster(\n      data = stats,\n      mapping = aes(window_id, region_id, fill = {{ col_stats }})\n    ) +\n    geom_rect(\n      data = clusters_p,\n      mapping = aes(\n        xmin = start - 0.5, \n        xmax = end + 0.5, \n        ymin = region_id - 0.5, \n        ymax = region_id + 0.5\n      ),\n      color = \"black\",\n      fill = NA,\n      na.rm = TRUE\n    ) +\n    geom_text(\n      data = clusters_p,\n      mapping = aes(\n        (start + end) / 2,\n        region_id,\n        label = rstatix::p_mark_significant({{ col_p }})\n      ),\n      color = \"blue\",\n      na.rm = TRUE\n    ) +\n    scale_fill_gradient2(\n      name = \"Pearson's Correlation\", \n      low = colors_cor[\"neg\"], \n      high = colors_cor[\"pos\"]\n    ) +\n    scale_x_continuous(\n      name = \"Time (s)\", \n      labels = \\(x) x * 0.02, \n      expand = expansion(mult = .01)\n    ) +\n    scale_y_continuous(\n      name = \"Region\",\n      breaks = scales::breaks_width(1),\n      expand = expansion(mult = .01)\n    ) +\n    facet +\n    theme_classic() +\n    theme(legend.position = \"top\")\n}\n```\n:::\n\n\n# Inter-subject representation similarity\n\n## Abstract vs Concrete\n\n\n::: {#fig-inter-abs-con .cell}\n\n```{.r .cell-code}\ntargets::tar_read(rsa_inter_common_trials) |>\n  summarise(\n    mean_se(fisher_z),\n    .by = c(region_id, word_category)\n  ) |>\n  ggplot(aes(region_id, y, ymax = ymax, ymin = ymin)) +\n  geom_col(aes(fill = word_category), position = position_dodge(width = 0.4), width = 0.4) +\n  geom_errorbar(aes(group = word_category), position = position_dodge(width = 0.4), width = 0) +\n  scale_x_continuous(name = \"Region\", breaks = scales::breaks_width(1)) +\n  scale_y_continuous(name = \"Intersubject Correlation\") +\n  ggsci::scale_fill_d3(name = \"Word Type\") +\n  ggpubr::theme_pubclean()\n\ntargets::tar_read(summary_word_cat_rsa_inter_common_trials_window) |>\n  ggplot(aes(window_id, y, ymax = ymax, ymin = ymin)) +\n  geom_line(aes(color = word_category, group = word_category)) +\n  geom_ribbon(aes(fill = word_category), alpha = 0.5) +\n  scale_x_continuous(name = \"Time (ms)\", labels = \\(x) x * 20) +\n  scale_y_continuous(name = \"Intersubject Correlation\") +\n  ggsci::scale_fill_d3(name = \"Word Type\") +\n  ggsci::scale_color_d3(name = \"Word Type\") +\n  facet_wrap(vars(region_id)) +\n  ggpubr::theme_pubclean()\n```\n\n::: {.cell-output-display}\n![Without time window](index_files/figure-html/fig-inter-abs-con-1.png){#fig-inter-abs-con-1 width=672}\n:::\n\n::: {.cell-output-display}\n![With time window [^window]](index_files/figure-html/fig-inter-abs-con-2.png){#fig-inter-abs-con-2 width=672}\n:::\n\nVerify if intersubject similarity of concrete is larger than that of abstract.\n:::\n\n\n[^window]: Step size: 20 ms; Window length: 100 ms. The same below.\n\n## Subsequent memory effect\n\n\n::: {#fig-inter-mem-eff .cell}\n\n```{.r .cell-code}\ntargets::tar_read(rsa_inter_common_trials) |>\n  summarise(\n    mean_se(fisher_z),\n    .by = c(region_id, response_type_shared)\n  ) |>\n  ggplot(aes(region_id, y, ymax = ymax, ymin = ymin)) +\n  geom_col(aes(fill = response_type_shared), position = position_dodge(width = 0.4), width = 0.4) +\n  geom_errorbar(aes(group = response_type_shared), position = position_dodge(width = 0.4), width = 0) +\n  scale_x_continuous(name = \"Region\", breaks = scales::breaks_width(1)) +\n  scale_y_continuous(name = \"Intersubject Correlation\") +\n  scale_fill_brewer(name = \"Mem Type Common\", palette = \"Oranges\", direction = -1) +\n  ggpubr::theme_pubclean()\n\ntargets::tar_read(summary_word_mem_rsa_inter_common_trials_window) |>\n  ggplot(aes(window_id, y, ymax = ymax, ymin = ymin)) +\n  geom_line(aes(color = response_type_shared, group = response_type_shared)) +\n  geom_ribbon(aes(fill = response_type_shared)) +\n  scale_x_continuous(name = \"Time (ms)\", labels = \\(x) x * 20) +\n  scale_y_continuous(name = \"Intersubject Correlation\") +\n  scale_color_brewer(\n    name = \"Mem Type Common\", \n    palette = \"Oranges\", direction = -1, \n    aesthetics = c(\"colour\", \"fill\")\n  ) +\n  facet_wrap(vars(region_id)) +\n  ggpubr::theme_pubclean()\n```\n\n::: {.cell-output-display}\n![Whole trial time series](index_files/figure-html/fig-inter-mem-eff-1.png){#fig-inter-mem-eff-1 width=672}\n:::\n\n::: {.cell-output-display}\n![With time window](index_files/figure-html/fig-inter-mem-eff-2.png){#fig-inter-mem-eff-2 width=672}\n:::\n\nAverage inter-subject representation similarity among different memory conditions\n:::\n\n\n# Predict Memory ability\n\nThe indicator calculation is based on [@manns2003].\n\n\n::: {#fig-predict-performance .cell .column-page}\n\n```{.r .cell-code}\ntargets::tar_load(mem_perf)\narrow::read_parquet(targets::tar_read(file_rs_group_whole)) |>\n  inner_join(mem_perf, by = \"subj_id\", relationship = \"many-to-many\") |>\n  filter(mem_type %in% names(labels_mem_type)) |>\n  ggplot(aes(fisher_z, dprime, color = mem_type)) +\n  geom_point() +\n  stat_smooth(method = \"lm\", formula = y ~ x) +\n  ggpmisc::stat_correlation(\n    ggpmisc::use_label(c(\"r\", \"p.value\")),\n    small.r = TRUE,\n    small.p = TRUE\n  ) +\n  scale_color_brewer(palette = \"Dark2\", guide = \"none\") +\n  scale_x_continuous(\n    name = \"Individual-to-Group Similarity\",\n    breaks = scales::breaks_pretty(n = 4)\n  ) +\n  scale_y_continuous(name = \"d'\") +\n  facet_grid(\n    rows = vars(mem_type),\n    cols = vars(region_id),\n    labeller = labeller(mem_type = labels_mem_type),\n    scales = \"free_x\",\n  ) +\n  ggpubr::theme_pubr()\n\narrow::read_parquet(targets::tar_read(file_rs_group_trial)) |>\n  summarise(\n    mean_fisher_z = mean(fisher_z, na.rm = TRUE),\n    .by = c(region_id, subj_id)\n  ) |>\n  inner_join(mem_perf, by = \"subj_id\", relationship = \"many-to-many\") |>\n  filter(mem_type %in% names(labels_mem_type)) |>\n  ggplot(aes(mean_fisher_z, dprime, color = mem_type)) +\n  geom_point() +\n  stat_smooth(method = \"lm\", formula = y ~ x) +\n  ggpmisc::stat_correlation(\n    ggpmisc::use_label(c(\"r\", \"p.value\")),\n    small.r = TRUE,\n    small.p = TRUE\n  ) +\n  scale_color_brewer(palette = \"Dark2\", guide = \"none\") +\n  scale_x_continuous(\n    name = \"Average Individual-to-Group Similarity\",\n    breaks = scales::breaks_pretty(n = 4)\n  ) +\n  scale_y_continuous(name = \"d'\") +\n  facet_grid(\n    rows = vars(mem_type),\n    cols = vars(region_id),\n    labeller = labeller(mem_type = labels_mem_type),\n    scales = \"free_x\",\n  ) +\n  ggpubr::theme_pubr()\n\nvis_cluster(\n  targets::tar_read(stats_pred_perf) |>\n    filter(mem_type %in% names(labels_mem_type)),\n  targets::tar_read(clusters_p_pred_perf) |>\n    filter(mem_type %in% names(labels_mem_type)),\n  facet = facet_grid(\n    rows = vars(mem_type), \n    labeller = labeller(\n      mem_type = labels_mem_type\n    )\n  )\n)\n```\n\n::: {.cell-output-display}\n![Concatenate all trials into one time series](index_files/figure-html/fig-predict-performance-1.png){#fig-predict-performance-1 width=1152}\n:::\n\n::: {.cell-output-display}\n![Average all trial-level synchronization](index_files/figure-html/fig-predict-performance-2.png){#fig-predict-performance-2 width=1152}\n:::\n\n::: {.cell-output-display}\n![Time-windowed Cluster Results](index_files/figure-html/fig-predict-performance-3.png){#fig-predict-performance-3 width=1152}\n:::\n\nPredict memory performance from individual-to-group synchronization\n:::\n\n\n## The scatter plot of two performance measure\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmem_perf |> \n  filter(mem_type %in% names(labels_mem_type)) |> \n  pivot_wider(\n    id_cols = subj_id,\n    names_from = mem_type,\n    values_from = dprime\n  ) |> \n  ggplot(aes(knowadj, remember)) +\n  geom_point() +\n  stat_smooth(method = \"lm\", formula = y ~ x) +\n  ggpmisc::stat_correlation(\n    ggpmisc::use_label(c(\"r\", \"p.value\")),\n    small.r = TRUE, \n    small.p = TRUE\n  ) +\n  scale_x_continuous(name = labels_mem_type[\"knowadj\"]) +\n  scale_y_continuous(name = labels_mem_type[\"remember\"]) +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![Visualize correlation between familiarity and recollection](index_files/figure-html/fig-scatter-mem-perf-1.png){#fig-scatter-mem-perf width=672}\n:::\n:::\n\n\n# Predict Memory Content\n\n\n::: {#fig-predict-content .cell .column-page}\n\n```{.r .cell-code}\ntargets::tar_read(stats_pred_content_nonwin) |> \n  mutate(star = rstatix::p_mark_significant(signif) |> str_extract(\"\\\\*+\")) |> \n  ggplot(aes(region_id, statistic, fill = acq)) +\n  geom_col(position = position_dodge(width = 0.6), width = 0.5) +\n  geom_text(\n    aes(label = star), \n    position = position_dodge(width = 0.6),\n    na.rm = TRUE\n  ) +\n  facet_grid(\n    rows = vars(method), \n    cols = vars(include),\n    labeller = labeller(\n      include = labels_include,\n      method = labels_method\n    )\n  ) +\n  scale_x_continuous(name = \"Region\", breaks = scales::breaks_width(1)) +\n  scale_y_continuous(name = \"Pearson's Correlation\") +\n  ggsci::scale_fill_npg(name = \"Level\", labels = labels_acq) +\n  ggpubr::theme_pubclean()\n\nvis_cluster(\n  targets::tar_read(stats_pred_content_window),\n  targets::tar_read(clusters_p_pred_content),\n  col_stats = statistic,\n  facet = facet_grid(\n    rows = vars(method), \n    cols = vars(include),\n    labeller = labeller(\n      include = labels_include,\n      method = labels_method\n    )\n  )\n)\n```\n\n::: {.cell-output-display}\n![Without Time Window](index_files/figure-html/fig-predict-content-1.png){#fig-predict-content-1 width=1152}\n:::\n\n::: {.cell-output-display}\n![With Time Window](index_files/figure-html/fig-predict-content-2.png){#fig-predict-content-2 width=1152}\n:::\n\nDirect Mantel test without controlling memory ability similarity\n:::\n\n::: {#fig-predict-content-partial .cell .column-page}\n\n```{.r .cell-code}\ntargets::tar_read(stats_pred_content_partial_nonwin) |> \n  mutate(star = rstatix::p_mark_significant(signif) |> str_extract(\"\\\\*+\")) |> \n  ggplot(aes(region_id, statistic, fill = acq)) +\n  geom_col(position = position_dodge(width = 0.6), width = 0.5) +\n  geom_text(\n    aes(label = star), \n    position = position_dodge(width = 0.6),\n    na.rm = TRUE\n  ) +\n  facet_grid(\n    rows = vars(method), \n    cols = vars(include),\n    labeller = labeller(\n      include = labels_include,\n      method = labels_method\n    )\n  ) +\n  scale_x_continuous(name = \"Region\", breaks = scales::breaks_width(1)) +\n  scale_y_continuous(name = \"Pearson's Correlation\") +\n  ggsci::scale_fill_npg(name = \"Level\", labels = labels_acq) +\n  ggpubr::theme_pubclean()\n\nvis_cluster(\n  targets::tar_read(stats_pred_content_partial_window),\n  targets::tar_read(clusters_p_pred_content_partial),\n  col_stats = statistic,\n  facet = facet_grid(\n    rows = vars(method), \n    cols = vars(include),\n    labeller = labeller(\n      include = labels_include,\n      method = labels_method\n    )\n  )\n)\n```\n\n::: {.cell-output-display}\n![Without Time Window](index_files/figure-html/fig-predict-content-partial-1.png){#fig-predict-content-partial-1 width=1152}\n:::\n\n::: {.cell-output-display}\n![With Time Window](index_files/figure-html/fig-predict-content-partial-2.png){#fig-predict-content-partial-2 width=1152}\n:::\n\nPartial Mantel test controlling memory ability similarity\n:::\n\n\n# References\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}