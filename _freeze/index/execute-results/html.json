{
  "hash": "3c9db66c1318cebb0b18e03207022fdd",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Representation Analysis\nauthor:\n  - name: Liang Zhang\n  - name: Jintao Sheng\nformat:\n  html:\n    code-fold: true\n    toc: true\nexecute:\n  warning: false\neditor_options:\n  chunk_output_type: console\n---\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(patchwork)\ninvisible(common::source.all(\"R_quarto\", isolate = FALSE))\ntheme_set(\n  ggpubr::theme_pubr(base_family = \"Gill Sans MT\", base_size = 12) %+replace%\n    theme(\n      axis.line = element_line(linewidth = 1),\n      # to make the background transparent\n      # by ChatGPT: based on https://stackoverflow.com/a/41878833/5996475\n      panel.background = element_rect(fill = \"transparent\", colour = NA),\n      plot.background = element_rect(fill = \"transparent\", colour = NA),\n      legend.background = element_rect(fill = \"transparent\", colour = NA),\n      legend.key = element_rect(fill = \"transparent\", colour = NA)\n    )\n)\n```\n:::\n\n\n# Behavioral Results\n\n## Main Results\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlayout <- \"\n###AA\n###AA\n###BB\nCCCBB\nCCCDD\nCCCDD\n\"\n\np_perf <- targets::tar_read(mem_perf) |>\n  ggplot(aes(dprime)) +\n  geom_histogram(fill = \"grey\") +\n  scale_x_continuous(name = \"d' (Overall)\") +\n  scale_y_continuous(name = \"Count\")\n\np_smc <- targets::tar_read(smc) |>\n  enframe() |>\n  ggplot(aes(value)) +\n  geom_histogram(fill = \"grey\") +\n  scale_x_continuous(name = \"SMC\") +\n  scale_y_continuous(name = \"Count\")\n\np_memorability <- targets::tar_read(memorability) |>\n  filter(word_id <= 150) |>\n  mutate(\n    trial_id_new = as.integer(fct_reorder(factor(trial_id), desc(pc)))\n  ) |>\n  ggplot(aes(trial_id_new, ymin = 0, ymax = pc)) +\n  geom_linerange(color = \"grey\", linewidth = 0.7) +\n  scale_x_continuous(name = \"Order of Words\", expand = expansion(add = 0.5)) +\n  scale_y_continuous(name = \"Memorability\", expand = c(0, 0))\n\np_memorability_content <- targets::tar_read(memorability_content) |>\n  ggplot(aes(r)) +\n  geom_histogram(fill = \"grey\") +\n  geom_vline(\n    xintercept = mean(targets::tar_read(memorability_content)$r),\n    linetype = \"dotted\"\n  ) +\n  geom_vline(xintercept = sqrt(0.5), linetype = \"dotted\", color = \"red\") +\n  scale_x_continuous(\n    name = \"Individual-to-Group\\nMemory Content Similarity\"\n  ) +\n  scale_y_continuous(name = \"Count\", expand = expansion(c(0, 0)))\n\np_perf +\n  p_smc +\n  p_memorability +\n  p_memorability_content +\n  plot_layout(design = layout)\n\nif (!interactive()) {\n  ggsave_default(width = 8, height = 5)\n}\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/fig-1-behav-1.png){#fig-1-behav width=768}\n:::\n:::\n\n\n## Supplementary Results\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntargets::tar_read(mem_perf) |>\n  left_join(\n    targets::tar_read(mem_perf_precise),\n    by = \"subj_id\"\n  ) |>\n  select(!subj_id) |>\n  rename(\n    Overall = dprime,\n    Recollection = dprime_rem,\n    Familiarity = dprime_know\n  ) |>\n  GGally::ggpairs(\n    diag = list(continuous = \"barDiag\"),\n    lower = list(\n      continuous = function(data, mapping, ...) {\n        ggplot(data, mapping) +\n          geom_point(color = \"grey\") +\n          geom_smooth(method = \"lm\", color = \"black\") +\n          ggpmisc::stat_correlation(\n            ggpmisc::use_label(c(\"r\", \"p.value\")),\n            small.r = TRUE,\n            small.p = TRUE\n          )\n      }\n    ),\n    upper = \"blank\",\n    switch = \"both\"\n  ) +\n  theme(\n    strip.text = element_text(size = 16),\n    strip.background = element_blank(),\n    strip.placement = \"outside\"\n  )\n\nif (!interactive()) {\n  ggsave_default(width = 6, height = 6)\n}\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/fig-supp-1-behav-corr-1.png){#fig-supp-1-behav-corr width=576}\n:::\n:::\n\n\n# Representation Stability\n\nHere we investigate the stability of group-level representations across participants. We compute the stability of group-level representations by randomly sampling a subset of participants and computing the correlation between the group-level representation computed from this subset and the full group-level representation.\n\nSee [this quarto document](./_topoplot.qmd) for the topography of CCA components (first 3 only).\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntargets::tar_load(patterns_group_stability)\nsize_subjs <- seq(20, 200, by = 20)\npredictions <- patterns_group_stability |>\n  reframe(\n    fit_curve(size, r) |>\n      predict(newdata = data.frame(x = size_subjs)) |>\n      as_tibble_col(\"r\") |>\n      add_column(size = size_subjs, .before = 1L),\n    .by = cca_id\n  )\np_stability <- patterns_group_stability |>\n  ggplot(aes(size, r, color = factor(cca_id))) +\n  ggdist::stat_dotsinterval() +\n  geom_point(aes(size, r), predictions, size = 1) +\n  geom_line(aes(size, r), predictions, linetype = \"longdash\") +\n  scale_x_continuous(\n    name = \"# Participants\",\n    breaks = scales::breaks_width(40)\n  ) +\n  scale_y_continuous(name = \"Stability\") +\n  scale_color_components() +\n  facet_grid(cols = vars(cca_id), scales = \"free\") +\n  theme(strip.text = element_blank())\n\np_trend_gss <- targets::tar_read(data_gss_whole_resampled) |>\n  ggplot(aes(size, gss, color = factor(cca_id))) +\n  ggdist::stat_dotsinterval() +\n  scale_x_continuous(\n    name = \"# Participants\",\n    breaks = scales::breaks_width(40)\n  ) +\n  scale_y_continuous(name = \"GSS\") +\n  scale_color_components(guide = \"none\") +\n  facet_grid(cols = vars(cca_id), scales = \"free\") +\n  theme(strip.text = element_blank())\n\np_stability /\n  p_trend_gss +\n  plot_layout(guides = \"collect\", axes = \"collect\") &\n  theme(legend.position = \"bottom\")\n\nif (!interactive()) {\n  ggsave_default(width = 6, height = 4)\n}\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/fig-supp-2-group-averaged-stability-1.png){#fig-supp-2-group-averaged-stability width=576}\n:::\n:::\n\n\n# Semantic transformation, representation fidelity, and memory\n\nHere we use individual to semantic representation similarity (ISS), indicating *semantic transformation*, and individual to group representation similarity (IGS), indicating *representation fidelity*, to predict memory performance. We also compare the predictive power of ISS and IGS, and we explore the mediation effect of representation fidelity on the effect of semantic transformation on memory performance.\n\n## Predictive power of ISS and IGS (overall d')\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# ISS predicts memory\n# show legend because this the first panel of the figure\np_iss_mem_scatter <- visualize_scatter(\n  targets::tar_read(data_iss_whole),\n  targets::tar_read(mem_perf),\n  show_legend = TRUE\n)\n\np_iss_mem_dynamic <- visualize_dynamic(\n  targets::tar_read(stats_iss_mem_dynamic),\n  targets::tar_read(clusters_stats_iss_mem_dynamic),\n  col_stat = \"estimate\",\n  lab_stat = expression(italic(r)[ISS - \"d'\"])\n)\n\n# IGS predicts memory\np_igs_mem_scatter <- visualize_scatter(\n  targets::tar_read(data_igs_whole),\n  targets::tar_read(mem_perf)\n)\n\np_igs_mem_dynamic <- visualize_dynamic(\n  targets::tar_read(stats_igs_mem_dynamic),\n  targets::tar_read(clusters_stats_igs_mem_dynamic),\n  lab_stat = expression(italic(r)[IGS - \"d'\"])\n)\n\n(p_iss_mem_scatter | p_iss_mem_dynamic) /\n  (p_igs_mem_scatter | p_igs_mem_dynamic) +\n  plot_layout(guides = \"collect\") &\n  # tags are added in Adobe Illustrator\n  # plot_annotation(tag_levels = \"A\") &\n  theme(legend.position = \"top\")\n\nif (!interactive()) {\n  ggsave_default(width = 13, height = 5)\n}\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/fig-2-iss-igs-pred-mem-1.png){#fig-2-iss-igs-pred-mem width=1248}\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# ISS predicts memory\n# show legend because this the first panel of the figure\np_iss_mem_scatter <- visualize_scatter(\n  targets::tar_read(data_iss_whole_rt_locked),\n  targets::tar_read(mem_perf),\n  show_legend = TRUE\n)\n\np_iss_mem_dynamic <- visualize_dynamic(\n  targets::tar_read(stats_iss_mem_dynamic_rt_locked),\n  targets::tar_read(clusters_stats_iss_mem_dynamic_rt_locked),\n  col_stat = \"estimate\",\n  lab_stat = expression(italic(r)[ISS - \"d'\"]),\n  onset = 1\n)\n\n# IGS predicts memory\np_igs_mem_scatter <- visualize_scatter(\n  targets::tar_read(data_igs_whole_rt_locked),\n  targets::tar_read(mem_perf)\n)\n\np_igs_mem_dynamic <- visualize_dynamic(\n  targets::tar_read(stats_igs_mem_dynamic_rt_locked),\n  targets::tar_read(clusters_stats_igs_mem_dynamic_rt_locked),\n  lab_stat = expression(italic(r)[IGS - \"d'\"]),\n  onset = 1\n)\n\n(p_iss_mem_scatter | p_iss_mem_dynamic) /\n  (p_igs_mem_scatter | p_igs_mem_dynamic) +\n  plot_layout(guides = \"collect\") &\n  # tags are added in Adobe Illustrator\n  # plot_annotation(tag_levels = \"A\") &\n  theme(legend.position = \"top\")\n\nif (!interactive()) {\n  ggsave_default(width = 13, height = 5)\n}\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/fig-2-iss-igs-pred-mem-rt-locked-1.png){#fig-2-iss-igs-pred-mem-rt-locked width=1248}\n:::\n:::\n\n\n## Predictive power of ISS and IGS (precise d')\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# ISS predicts memory\np_iss_mem_rem_scatter <- visualize_scatter(\n  targets::tar_read(data_iss_whole),\n  targets::tar_read(mem_perf_precise) |>\n    select(subj_id, dprime = dprime_rem),\n  lab_perf = \"Recollection\",\n  show_legend = TRUE\n)\n\np_iss_mem_rem_dynamic <- visualize_dynamic(\n  targets::tar_read(stats_iss_mem_dynamic_dprime_rem),\n  targets::tar_read(clusters_stats_iss_mem_dynamic_dprime_rem),\n  col_stat = \"estimate\",\n  lab_stat = expression(italic(r)[ISS - \"Recollection\"])\n)\n\np_iss_mem_know_scatter <- visualize_scatter(\n  targets::tar_read(data_iss_whole),\n  targets::tar_read(mem_perf_precise) |>\n    select(subj_id, dprime = dprime_know),\n  lab_perf = \"Familiarity\",\n  col_stat = \"iss\"\n)\n\np_iss_mem_know_dynamic <- visualize_dynamic(\n  targets::tar_read(stats_iss_mem_dynamic_dprime_know),\n  targets::tar_read(clusters_stats_iss_mem_dynamic_dprime_know),\n  col_stat = \"estimate\",\n  lab_stat = expression(italic(r)[ISS - \"Familiarity\"])\n)\n\n# IGS predicts memory\np_igs_mem_rem_scatter <- visualize_scatter(\n  targets::tar_read(data_igs_whole),\n  targets::tar_read(mem_perf_precise) |>\n    select(subj_id, dprime = dprime_rem),\n  lab_perf = \"Recollection\"\n)\n\np_igs_mem_rem_dynamic <- visualize_dynamic(\n  targets::tar_read(stats_igs_mem_dynamic_dprime_rem),\n  targets::tar_read(clusters_stats_igs_mem_dynamic_dprime_rem),\n  lab_stat = expression(italic(r)[IGS - \"Recollection\"])\n)\n\np_igs_mem_know_scatter <- visualize_scatter(\n  targets::tar_read(data_igs_whole),\n  targets::tar_read(mem_perf_precise) |>\n    select(subj_id, dprime = dprime_know),\n  lab_perf = \"Familiarity\"\n)\n\np_igs_mem_know_dynamic <- visualize_dynamic(\n  targets::tar_read(stats_igs_mem_dynamic_dprime_know),\n  targets::tar_read(clusters_stats_igs_mem_dynamic_dprime_know),\n  lab_stat = expression(italic(r)[IGS - \"Familiarity\"])\n)\n\n(p_iss_mem_rem_scatter | p_iss_mem_rem_dynamic) /\n  (p_iss_mem_know_scatter | p_iss_mem_know_dynamic) /\n  (p_igs_mem_rem_scatter | p_igs_mem_rem_dynamic) /\n  (p_igs_mem_know_scatter | p_igs_mem_know_dynamic) +\n  plot_layout(guides = \"collect\") &\n  plot_annotation(tag_levels = \"A\") &\n  theme(legend.position = \"bottom\")\n\nif (!interactive()) {\n  ggsave_default(width = 13, height = 8)\n}\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/fig-supp-3-iss-igs-pred-mem-1.png){#fig-supp-3-iss-igs-pred-mem width=1248}\n:::\n:::\n\n\n## Comparison of ISS and IGS\n\nHere we compare the predictive power of ISS and IGS on memory performance. We use linear regression to model the relationship between ISS/IGS and memory performance, and we compare the models using adjusted R-squared.\n\nNote we decided that the figures will be only included in the supplementary materials.\n\n\n::: {.cell}\n\n```{.r .cell-code}\np_iss_comp <- visualize_data_distr(\n  targets::tar_read(data_iss_whole),\n  targets::tar_read(stats_iss_whole),\n  targets::tar_read(iss_comparison),\n  show_legend = TRUE\n)\n\np_iss_dynamic <- visualize_dynamic(\n  targets::tar_read(stats_iss_dynamic),\n  targets::tar_read(clusters_stats_iss_dynamic),\n  col_stat = \"estimate\",\n  lab_stat = \"ISS\"\n)\n\np_igs_comp <- visualize_data_distr(\n  targets::tar_read(data_igs_whole),\n  targets::tar_read(stats_igs_whole),\n  targets::tar_read(igs_comparison)\n)\n\np_igs_dynamic <- visualize_dynamic(\n  targets::tar_read(stats_igs_dynamic),\n  targets::tar_read(clusters_stats_igs_dynamic),\n  col_stat = \"estimate\",\n  lab_stat = \"IGS\"\n)\n\np_gss_whole <- visualize_mantel(\n  targets::tar_read(patterns_group_whole),\n  targets::tar_read(pattern_semantics),\n  targets::tar_read(stats_gss_whole),\n  \"Group Averaged Neural Representation\",\n  \"Semantic Resprentation\"\n)\n\np_gss_dynamic <- visualize_dynamic(\n  targets::tar_read(stats_gss_dynamic),\n  targets::tar_read(clusters_stats_gss_dynamic),\n  col_stat = \"statistic\",\n  lab_stat = \"GSS\"\n)\n\n(p_iss_comp | p_iss_dynamic) /\n  (p_igs_comp | p_igs_dynamic) /\n  (p_gss_whole | p_gss_dynamic) +\n  plot_layout(guides = \"collect\") &\n  plot_annotation(tag_levels = \"A\") &\n  theme(legend.position = \"bottom\")\n\nif (!interactive()) {\n  ggsave_default(width = 13, height = 10)\n}\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/fig-supp-4-iss-igs-comparison-1.png){#fig-supp-4-iss-igs-comparison width=1248}\n:::\n:::\n\n\n## Mediation analysis of ISS and IGS on memory performance\n\nFirst, we investigate the predictive power of ISS on memory performance after controlling for the effect of IGS. We use linear regression to model the relationship between ISS and memory performance, and we compare the models with and without IGS as a covariate.\n\n\n::: {.cell}\n\n```{.r .cell-code}\np_compare_iss_partial <- visualize_comp_partial(\n  targets::tar_read(iss_comp_partial),\n  comp_labels = c(\"ISS\", \"ISS|G\")\n)\n\np_iss_partial_scatter <- visualize_scatter(\n  targets::tar_read(data_iss_partial_whole),\n  targets::tar_read(mem_perf),\n  lab_stat = \"ISS|G\",\n  col_stat = \"iss\",\n  show_legend = TRUE\n)\n\np_iss_partial_dynamic <- visualize_dynamic(\n  targets::tar_read(stats_iss_partial_mem_dynamic),\n  targets::tar_read(clusters_stats_iss_partial_mem_dynamic),\n  col_stat = \"estimate\",\n  lab_stat = expression(italic(r)[\"ISS|G\" - \"d'\"])\n)\n\np_compare_predictions <- visualize_comp_preds(\n  `IGS + ISS|G` = targets::tar_read(lm_mem_igs_iss_partial),\n  `ISS|G` = targets::tar_read(lm_mem_iss_partial)\n)\n```\n:::\n\n\nSecond, we investigate the mediation effect of IGS on the relationship between ISS and memory performance. We use structural equation modeling (SEM) to model the mediation effect, and we visualize the mediation diagram.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiagram_iss_igs <- targets::tar_read(fit_med_iss_igs_dprime) |>\n  visualize_mediation(\n    lab_x = LAB_ISS_MED,\n    lab_m = LAB_IGS_MED,\n    lab_y = LAB_MEM_MED\n  )\ndiagram_iss_igs |>\n  DiagrammeRsvg::export_svg() |>\n  charToRaw() |>\n  rsvg::rsvg_png(\"figures/mediation_iss_igs_mem.png\", width = 1000)\np_mediation <- png::readPNG(\"figures/mediation_iss_igs_mem.png\", native = TRUE)\n```\n:::\n\n\n\n::: {.cell .column-page}\n\n```{.r .cell-code}\ndesign <- \"\nAAAAABBBBBBBBEEE\nAAAAABBBBBBBBEEE\nAAAAABBBBBBBBEEE\nCCCCCCCCDDDDDDDD\nCCCCCCCCDDDDDDDD\nCCCCCCCCDDDDDDDD\n\"\nwrap_elements(p_mediation) +\n  p_compare_iss_partial +\n  p_iss_partial_scatter +\n  p_iss_partial_dynamic +\n  p_compare_predictions +\n  plot_layout(design = design, guides = \"collect\") +\n  plot_annotation(tag_levels = \"A\") &\n  theme(legend.position = \"bottom\")\nif (!interactive()) {\n  ggsave_default(width = 13, height = 6)\n}\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/fig-3-iss-igs-mem-1.png){#fig-3-iss-igs-mem width=1248}\n:::\n:::\n\n\n# Control analysis: word shape similarity pattern\n\n\n::: {.cell .column-page}\n\n```{.r .cell-code}\np_gfs_whole <- visualize_mantel(\n  targets::tar_read(patterns_group_whole),\n  targets::tar_read(pattern_shapes),\n  targets::tar_read(stats_gfs_whole),\n  \"Group Averaged Neural Representation\",\n  \"Word Shape Similarity\"\n)\n\np_gfs_dynamic <- visualize_dynamic(\n  targets::tar_read(stats_gfs_dynamic),\n  targets::tar_read(clusters_stats_gfs_dynamic),\n  col_stat = \"statistic\",\n  lab_stat = \"GWS\",\n  show_legend = TRUE\n)\n\np_ifs_mem_whole <- visualize_scatter(\n  targets::tar_read(data_ifs_whole),\n  targets::tar_read(mem_perf),\n  lab_stat = \"IWS\",\n  col_stat = \"iss\"\n)\n\np_ifs_mem_dynamic <- visualize_dynamic(\n  targets::tar_read(stats_ifs_mem_dynamic),\n  targets::tar_read(clusters_stats_less_ifs_mem_dynamic),\n  col_stat = \"estimate\",\n  lab_stat = expression(italic(r)[IWS - \"d'\"])\n)\n\n(p_gfs_whole | p_gfs_dynamic) /\n  (p_ifs_mem_whole | p_ifs_mem_dynamic) +\n  plot_layout(guides = \"collect\") &\n  plot_annotation(tag_levels = \"A\") &\n  theme(legend.position = \"bottom\")\nif (!interactive()) {\n  ggsave_default(width = 12, height = 6)\n}\n```\n:::\n\n\n# Predicting Shared Memory Content (SMC)\n\n## Inter-Subject Pattern Similarity (ISPS)\n\n\n::: {.cell .column-page}\n\n```{.r .cell-code}\np_isps_dist <- targets::tar_read(data_isps_whole) |>\n  mutate(cca_id = factor(cca_id)) |>\n  unnest(isps) |>\n  ggplot(aes(cca_id, isps)) +\n  ggdist::stat_slabinterval(\n    aes(slab_color = cca_id, slab_fill = cca_id),\n    slab_alpha = 0.4,\n    side = \"both\"\n  ) +\n  geom_hline(\n    aes(yintercept = isps_baseline),\n    targets::tar_read(summary_isps_whole_permuted) |>\n      summarise(isps_baseline = mean(isps_mean), .by = cca_id) |>\n      mutate(cca_id = factor(cca_id)),\n    linetype = \"dotted\"\n  ) +\n  scale_x_discrete(name = NULL, labels = \\(x) paste0(\"C\", x)) +\n  scale_y_continuous(name = \"ISPS\") +\n  scale_color_components(\n    aesthetics = c(\"slab_color\", \"slab_fill\"),\n    guide = \"none\"\n  )\n\n# p_isps_dynamic <- visualize_dynamic(\n#   targets::tar_read(stats_isps_dynamic) |>\n#     mutate(\n#       ymax = isps_mean + isps_se,\n#       ymin = isps_mean - isps_se\n#     ),\n#   col_stat = \"isps_mean\",\n#   lab_stat = \"ISPS\",\n#   col_cis = c(\"ymin\", \"ymax\")\n# )\n\n# the cluster based permutation test is not useful (maybe we need TFCE)\np_isps_clusters <- visualize_dynamic(\n  targets::tar_read(stats_isps_dynamic) |>\n    mutate(\n      ymax = isps_mean + isps_se,\n      ymin = isps_mean - isps_se\n    ),\n  targets::tar_read(clusters_stats_isps_dynamic),\n  col_stat = \"isps_mean\",\n  lab_stat = \"ISPS\",\n  col_cis = c(\"ymin\", \"ymax\")\n)\n\np_isps_smc <- visualize_mantel_dist(\n  targets::tar_read(data_isps_smc_whole),\n  targets::tar_read(stats_isps_smc_whole),\n  expression(italic(r)[ISPS - SMC]),\n  show_legend = TRUE\n)\n\np_isps_smc_dynamic <- visualize_dynamic(\n  targets::tar_read(stats_isps_smc_dynamic),\n  targets::tar_read(clusters_stats_isps_smc_dynamic),\n  col_stat = \"statistic\",\n  lab_stat = expression(italic(r)[ISPS - SMC])\n)\n\np_isps_dist +\n  p_isps_clusters +\n  p_isps_smc +\n  p_isps_smc_dynamic +\n  plot_layout(guides = \"collect\") &\n  theme(legend.position = \"bottom\")\n\nif (!interactive()) {\n  ggsave_default(width = 13, height = 5)\n}\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/fig-4-isps-and-smc-1.png){#fig-4-isps-and-smc width=1248}\n:::\n:::\n\n\n\n::: {.cell .column-page}\n\n```{.r .cell-code}\np_isps_smc_partial_memory <- visualize_mantel_dist(\n  targets::tar_read(data_isps_smc_partial_ability_whole),\n  targets::tar_read(stats_isps_smc_partial_ability_whole),\n  expression(italic(r)[\"ISPS|Mem\" - SMC]),\n  show_legend = TRUE\n)\n\np_isps_smc_partial_memory_dynamic <- visualize_dynamic(\n  targets::tar_read(stats_isps_smc_partial_ability_dynamic),\n  targets::tar_read(clusters_stats_isps_smc_partial_ability_dynamic),\n  col_stat = \"statistic\",\n  lab_stat = expression(italic(r)[\"ISPS|Mem\" - SMC])\n)\n\np_isps_smc_partial_group_memory <- visualize_mantel_dist(\n  targets::tar_read(data_isps_smc_partial_group_ability_whole),\n  targets::tar_read(stats_isps_smc_partial_group_ability_whole),\n  expression(italic(r)[\"ISPS|(GRSM, Mem)\" - SMC])\n)\n\np_isps_smc_partial_group_memory_dynamic <- visualize_dynamic(\n  targets::tar_read(stats_isps_smc_partial_group_ability_dynamic),\n  targets::tar_read(clusters_stats_isps_smc_partial_group_ability_dynamic),\n  col_stat = \"statistic\",\n  lab_stat = expression(italic(r)[\"ISPS|(GRSM, Mem)\" - SMC])\n)\n\np_isps_smc_partial_semantic_memory <- visualize_mantel_dist(\n  targets::tar_read(data_isps_smc_partial_semantic_ability_whole),\n  targets::tar_read(stats_isps_smc_partial_semantic_ability_whole),\n  expression(italic(r)[\"ISPS|(Sem, Mem)\" - SMC])\n)\n\np_isps_smc_partial_semantic_memory_dynamic <- visualize_dynamic(\n  targets::tar_read(stats_isps_smc_partial_semantic_ability_dynamic),\n  targets::tar_read(clusters_stats_isps_smc_partial_semantic_ability_dynamic),\n  col_stat = \"statistic\",\n  lab_stat = expression(italic(r)[\"ISPS|(Sem, Mem)\" - SMC])\n)\n\n(p_isps_smc_partial_memory | p_isps_smc_partial_memory_dynamic) /\n  (p_isps_smc_partial_group_memory | p_isps_smc_partial_group_memory_dynamic) /\n  (p_isps_smc_partial_semantic_memory |\n    p_isps_smc_partial_semantic_memory_dynamic) +\n  plot_layout(guides = \"collect\") +\n  plot_annotation(tag_levels = \"A\") &\n  theme(legend.position = \"bottom\")\n\nif (!interactive()) {\n  ggsave_default(width = 13, height = 7)\n}\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/fig-supp-6-isps-smc-partial-1.png){#fig-supp-6-isps-smc-partial width=1248}\n:::\n:::\n\n\n## Neural Synchronization\n\n\n::: {.cell .column-page}\n\n```{.r .cell-code}\ntargets::tar_load(sync_inter_intra)\nsummary_sync <- sync_inter_intra |>\n  summarise(\n    broom::tidy(t.test(sync)),\n    .by = c(cca_id, type)\n  ) |>\n  rstatix::adjust_pvalue() |>\n  rstatix::add_significance(\n    cutpoints = c(0, 0.001, 0.01, 0.05, 1),\n    symbols = c(\"***\", \"**\", \"*\", \"\")\n  )\ncompare_sync_p <- sync_inter_intra |>\n  pivot_wider(\n    id_cols = c(subj_id, cca_id),\n    names_from = type,\n    values_from = sync\n  ) |>\n  summarise(\n    broom::tidy(t.test(intra, inter_ahead, paired = TRUE)),\n    .by = cca_id\n  ) |>\n  rstatix::adjust_pvalue() |>\n  rstatix::add_significance(\n    cutpoints = c(0, 0.001, 0.01, 0.05, 1),\n    symbols = c(\"***\", \"**\", \"*\", \"\")\n  ) |>\n  mutate(\n    start = \"intra\",\n    end = \"inter_ahead\",\n    y_position = max(summary_sync$conf.high) * 1.1\n  )\np_sync_compare <- summary_sync |>\n  ggplot(aes(type, estimate)) +\n  geom_col(\n    aes(color = cca_id, fill = cca_id, alpha = type),\n    width = 0.75\n  ) +\n  geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = 0.1) +\n  geom_text(\n    aes(y = conf.high, label = p.value.adj.signif),\n    vjust = 0,\n    size = SIZE_LABEL\n  ) +\n  ggsignif::geom_signif(\n    data = compare_sync_p,\n    aes(\n      xmin = start,\n      xmax = end,\n      annotations = p.value.adj.signif,\n      y_position = y_position\n    ),\n    textsize = SIZE_LABEL,\n    inherit.aes = FALSE,\n    manual = TRUE\n  ) +\n  facet_grid(cols = vars(cca_id)) +\n  scale_x_discrete(name = NULL, labels = c(\"Intra\", \"Inter\")) +\n  scale_y_continuous(\n    name = \"Neural Sync\",\n    expand = expansion(c(0, 0.1))\n  ) +\n  scale_color_components(aesthetics = c(\"fill\", \"color\")) +\n  scale_alpha_manual(\n    name = NULL,\n    values = c(1, 0),\n    guide = \"none\"\n  ) +\n  theme(strip.text = element_blank())\n\nsync_mem <- sync_inter_intra |>\n  left_join(targets::tar_read(mem_perf), by = \"subj_id\") |>\n  mutate(cca_id = factor(cca_id))\nstats_sync_mem <- sync_mem |>\n  summarise(\n    broom::tidy(cor.test(sync, dprime)),\n    .by = c(cca_id, type)\n  ) |>\n  rstatix::adjust_pvalue() |>\n  rstatix::add_significance(\n    cutpoints = c(0, 0.001, 0.01, 0.05, 1),\n    symbols = c(\"***\", \"**\", \"*\", \"\")\n  ) |>\n  prepare_corr_plotmath() |>\n  mutate(\n    x = min(sync_mem$sync),\n    y = max(sync_mem$dprime) * 1.2 * (1 - 0.1 * as.integer(type))\n  )\n\np_pred_mem <- sync_mem |>\n  ggplot(aes(x = sync, y = dprime, alpha = type)) +\n  geom_point(aes(color = cca_id, shape = type)) +\n  geom_line(\n    aes(color = cca_id),\n    stat = \"smooth\",\n    method = \"lm\",\n    formula = y ~ x\n    # linewidth = 2,\n    # fullrange = TRUE\n  ) +\n  geom_text(\n    aes(x, y, label = label),\n    stats_sync_mem,\n    hjust = 0,\n    vjust = 1,\n    parse = TRUE,\n  ) +\n  facet_grid(cols = vars(cca_id)) +\n  scale_x_continuous(name = \"Neural Sync\") +\n  scale_y_continuous(name = \"Memory (d')\") +\n  scale_alpha_manual(\n    name = NULL,\n    values = c(1, 0.5),\n    guide = \"none\"\n  ) +\n  scale_shape_manual(\n    name = NULL,\n    values = c(16, 1),\n    labels = c(\"Intra\", \"Inter\")\n    # guide = \"none\"\n  ) +\n  scale_color_components(guide = \"none\") +\n  theme(strip.text = element_blank())\n\np_sync_smc <- visualize_mantel_dist(\n  targets::tar_read(sync_smc_whole),\n  targets::tar_read(stats_sync_smc_whole),\n  expression(italic(r)[Sync - SMC])\n)\n\np_sync_smc_dynamic <- visualize_dynamic(\n  targets::tar_read(stats_sync_smc_dynamic),\n  targets::tar_read(clusters_stats_sync_smc_dynamic),\n  col_stat = \"statistic\",\n  lab_stat = expression(italic(r)[Sync - SMC])\n)\n\np_sync_compare +\n  p_pred_mem +\n  p_sync_smc +\n  p_sync_smc_dynamic +\n  plot_layout(guides = \"collect\") +\n  plot_annotation(tag_levels = \"A\") &\n  theme(legend.position = \"bottom\")\nggsave(\"figures/sync_results.png\", width = 13, height = 6.5, dpi = 300)\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1)\n\n# representational patterns ----\nvis_pat <- function(pat) {\n  corrplot::corrplot(\n    pat,\n    method = \"color\",\n    outline = TRUE,\n    col = corrplot::COL1(\"Greys\"),\n    tl.pos = \"n\",\n    cl.pos = \"n\"\n  )\n}\nx_indiv <- pracma::squareform(rnorm(15, 0.5, 0.25))\nx_group <- pracma::squareform(rnorm(15, 0.5, 0.25))\nx_sem <- pracma::squareform(rnorm(15, 0.5, 0.25))\ndiag(x_indiv) <- diag(x_group) <- diag(x_sem) <- 1\npng(\"figures/diagrams/indiv_matrix.png\", width = 400, height = 400)\nvis_pat(x_indiv)\ndev.off()\npng(\"figures/diagrams/group_matrix.png\", width = 400, height = 400)\nvis_pat(x_group)\ndev.off()\npng(\"figures/diagrams/sem_matrix.png\", width = 400, height = 400)\nvis_pat(x_sem)\ndev.off()\n\n# word2vec embeddings ----\nembedding <- as_tibble(split(rnorm(14, 0.5, 0.2), rep(1:2, each = 7))) |>\n  mutate(id = seq_len(n()), label = \"\")\nembedding[6, 1:2] <- NA\nembedding$label[6] <- \"…\"\n\nembedding |>\n  ggplot(aes(id, 1, fill = `1`)) +\n  geom_tile() +\n  geom_text(aes(label = label), size = 12, vjust = 0.2) +\n  scale_fill_gradient(\n    low = \"grey80\",\n    high = \"grey20\",\n    na.value = \"white\",\n    guide = \"none\"\n  ) +\n  coord_fixed() +\n  theme_void()\nggplot2::ggsave(\n  \"figures/diagrams/embedding_1.png\",\n  width = 8,\n  height = 2,\n  dpi = 300\n)\n\nembedding |>\n  ggplot(aes(id, 1, fill = `2`)) +\n  geom_tile() +\n  geom_text(aes(label = label), size = 12, vjust = 0.2) +\n  scale_fill_gradient(\n    low = \"grey80\",\n    high = \"grey20\",\n    na.value = \"white\",\n    guide = \"none\"\n  ) +\n  coord_fixed() +\n  theme_void()\nggplot2::ggsave(\n  \"figures/diagrams/embedding_2.png\",\n  width = 8,\n  height = 2,\n  dpi = 300\n)\n\n# neural activity ----\ntargets::tar_load(file_cca_y)\ndata_trials <- arrow::open_dataset(file_cca_y) |>\n  filter(subj_id == 1, cca_id == 1, trial_id %in% 1:6) |>\n  collect()\ndata_trials |>\n  nest(.by = trial_id) |>\n  mutate(\n    walk2(\n      data,\n      trial_id,\n      ~ {\n        ggplot(.x, aes(time_id, y)) +\n          geom_line(linewidth = 3, color = \"grey\") +\n          scale_x_continuous(name = \"Time (ms)\") +\n          scale_y_continuous(name = \"Neural Activity\") +\n          theme_void()\n        ggsave(\n          paste0(\"figures/diagrams/trial_\", .y, \".png\"),\n          width = 8,\n          height = 2,\n          dpi = 300\n        )\n      }\n    )\n  )\n\ndata_group <- arrow::open_dataset(file_cca_y) |>\n  filter(trial_id %in% 1:2, cca_id == 1) |>\n  collect() |>\n  summarise(y = mean(y, na.rm = TRUE), .by = c(trial_id, time_id))\ndata_group |>\n  nest(.by = trial_id) |>\n  mutate(\n    walk2(\n      data,\n      trial_id,\n      ~ {\n        ggplot(.x, aes(time_id, y)) +\n          geom_line(linewidth = 3, color = \"black\") +\n          scale_x_continuous(name = \"Time (ms)\") +\n          scale_y_continuous(name = \"Neural Activity\") +\n          theme_void()\n        ggsave(\n          paste0(\"figures/diagrams/group_avg_trial_\", .y, \".png\"),\n          width = 8,\n          height = 2,\n          dpi = 300\n        )\n      }\n    )\n  )\n```\n:::\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}