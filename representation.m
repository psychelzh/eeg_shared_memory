channel = readtable(fullfile("config", "eeg_channel_labels_64.csv"), TextType="string");
subjs_id = unique(readtable(fullfile("data", "group_task-wordencoding_events.csv")).subj_id, "stable");
load(fullfile("data", "grp_subjs206_nodemean_1000ms.mat"), "grp_data");
[~, len_time_point, len_trial, len_subj] = size(grp_data);
regions_id = 1:6;

% debug
% regions_id = 1:2;
% len_trial = 2;

%% intersubject similarity

% we keep the lower triangular correlation (no diagonal)
idx_keep_cors = tril(true(len_subj, len_subj), -1);

% acquire: trial-level
simi_inter_by_trial = ...
    utils.preallocate(regions_id, 1:len_trial, subjs_id, subjs_id, ...
    VariableNames=["region_id", "trial_id", "subj_id_col", "subj_id_row"]);
simi_inter_by_trial = simi_inter_by_trial( ...
    simi_inter_by_trial.subj_id_row > simi_inter_by_trial.subj_id_col, :);
fprintf("Processing trial level intersubject similarity...\n")
for i_region = regions_id
    chan_in_reg = channel.code(channel.("region" + string(i_region)) ~= 0);
    fprintf("Region " + string(i_region) + "\n")
    for i_trial = progress(1:len_trial)
        % collapse channel and time (thus spatiotemporal pattern)
        cur_cor_mat = corr(reshape(grp_data(chan_in_reg, :, i_trial, :), ...
            length(chan_in_reg) * len_time_point, []));
        simi_inter_by_trial.fisher_z( ...
            simi_inter_by_trial.region_id == i_region & ...
            simi_inter_by_trial.trial_id == i_trial) = ...
            atanh(cur_cor_mat(idx_keep_cors));
    end
end
parquetwrite( ...
    fullfile("data", "type-inter_acq-trial_rs.parquet"), ...
    simi_inter_by_trial)
clearvars simi_inter_by_trial

% acquire: whole-time-series
simi_inter_by_whole = ...
    utils.preallocate(regions_id, subjs_id, subjs_id, ...
    VariableNames=["region_id", "subj_id_col", "subj_id_row"]);
simi_inter_by_whole = simi_inter_by_whole( ...
    simi_inter_by_whole.subj_id_row > simi_inter_by_whole.subj_id_col, :);
fprintf("Processing whole time series intersubject similarity...\n")
for i_region = progress(regions_id)
    chan_in_reg = channel.code(channel.("region" + string(i_region)) ~= 0);
    cur_cor_mat = corr(reshape(grp_data(chan_in_reg, :, :, :), ...
        length(chan_in_reg) * len_time_point * len_trial, []), ...
        rows="pairwise");
    simi_inter_by_whole.fisher_z( ...
        simi_inter_by_whole.region_id == i_region) = ...
        atanh(cur_cor_mat(idx_keep_cors));
end
parquetwrite( ...
    fullfile("data", "type-inter_acq-whole_rs.parquet"), ...
    simi_inter_by_whole)
clearvars simi_inter_by_whole

%% individual to group similarity

% acquire: trial-level
simi_grp_by_trial = ...
    utils.preallocate(regions_id, 1:len_trial, subjs_id, ...
    VariableNames=["region_id", "trial_id", "subj_id"]);
fprintf("Processing trial level individual to group similarity...\n")
for i_region = regions_id
    chan_in_reg = channel.code(channel.("region" + string(i_region)) ~= 0);
    fprintf("Region " + string(i_region) + "\n")
    for i_trial = progress(1:len_trial)
        % collapse channel and time (thus spatiotemporal pattern)
        cur_dat = reshape(grp_data(chan_in_reg, :, i_trial, :), ...
            length(chan_in_reg) * len_time_point, []);
        simi_grp_by_trial.fisher_z(...
            simi_grp_by_trial.region_id == i_region & ...
            simi_grp_by_trial.trial_id == i_trial) = ...
            utils.calc_simi_ind_to_grp(cur_dat, FisherZ=true);
    end
end
parquetwrite( ...
    fullfile("data", "type-group_acq-trial_rs.parquet"), ...
    simi_grp_by_trial)
clearvars simi_grp_by_trial

% acquire: whole-time-series
simi_grp_by_whole = utils.preallocate(regions_id, subjs_id, ...
    VariableNames=["region_id", "subj_id"]);
fprintf("Processing whole time series individual to group similarity...\n")
for i_region = progress(regions_id)
    chan_in_reg = channel.code(channel.("region" + string(i_region)) ~= 0);
    cur_dat = reshape(grp_data(chan_in_reg, :, :, :), ...
        length(chan_in_reg) * len_time_point * len_trial, []);
    simi_grp_by_whole.fisher_z(...
        simi_grp_by_whole.region_id == i_region) = ...
        utils.calc_simi_ind_to_grp(cur_dat, FisherZ=true);
end
parquetwrite( ...
    fullfile("data", "type-group_acq-whole_rs.parquet"), ...
    simi_grp_by_whole)
clearvars simi_grp_by_whole
